apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
apply plugin: 'jacoco'

def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretsProperties = new Properties()
if (secretsPropertiesFile.exists()) {
    secretsProperties.load(new FileInputStream(secretsPropertiesFile))
}

android {
    namespace "com.lksnext.parkingplantilla"
    buildToolsVersion "35.0.0"
    compileSdk 35

    defaultConfig {
        applicationId "com.lksnext.parkingplantilla"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "MAPS_API_KEY", "\"${secretsProperties['MAPS_API_KEY']}\""
        manifestPlaceholders = [MAPS_API_KEY: secretsProperties['MAPS_API_KEY'] ?: ""]
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.13"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        compose = true
        dataBinding = true
        viewBinding = true
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs(
                    '--add-opens=java.base/java.lang=ALL-UNNAMED',
                    '--add-opens=java.base/java.io=ALL-UNNAMED',
                    '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
            )
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.navigation:navigation-fragment:2.9.1'
    implementation 'androidx.navigation:navigation-ui:2.9.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation platform('com.google.firebase:firebase-bom:33.16.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-messaging:24.1.2'
    implementation 'com.google.firebase:firebase-auth:23.2.1'
    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation 'com.google.firebase:firebase-database'
    implementation 'com.google.android.gms:play-services-auth:21.3.0'
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation 'com.google.firebase:firebase-storage:21.0.2'

    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'

    implementation 'com.google.protobuf:protobuf-javalite:4.31.1'
    implementation "androidx.work:work-runtime:2.10.2"

    implementation platform('androidx.compose:compose-bom:2025.06.01')
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.activity:activity-compose:1.10.1'
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    androidTestImplementation 'org.mockito:mockito-android:5.18.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.hamcrest:hamcrest:3.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'


    debugImplementation "androidx.fragment:fragment-testing:1.8.8"

    configurations.configureEach {
        resolutionStrategy {
            force 'com.google.protobuf:protobuf-javalite:3.25.1'
        }
    }
    jacoco {
        toolVersion = "0.8.10"
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports"

        reports {
            xml.required = true
            html.required = true
        }

        def fileFilter = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                'android/**/*.*'
        ]

        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: fileFilter
        )

        def mainSrc = "$projectDir/src/main/java"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(
                files([debugTree]).collect {
                    fileTree(dir: it, excludes: fileFilter)
                }
        )

        executionData.setFrom(fileTree(dir: buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
        ]))

        doLast {
            println "âœ… Jacoco report task completed!"
        }
    }

    }

